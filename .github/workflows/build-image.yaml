name: "Build and Push images"

on:
  workflow_call:
    inputs:
      image_name:
        type: string
        required: true
        description: "Name of the image to build (= folder name)"
      sub_images:
        type: string
        required: false
        description: "Space-separated list of sub-image names. Can not be empty."
        default: "build"
      runs_on:
        type: string
        required: false
        description: "The OS used to build the docker image."
        default: "ubuntu-latest"
      # NEW: which platforms to build for
      platforms:
        type: string
        required: false
        description: "Comma-separated list of target platforms (e.g. linux/amd64,linux/arm64)"
        default: "linux/amd64"

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  IMAGE_NAME: ${{ inputs.image_name }}
  SUB_IMAGES: ${{ inputs.sub_images }}

jobs:
  build-and-push-image:
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # only set up QEMU & Buildx if we're doing anything beyond plain amd64
      - name: Register QEMU emulation (if needed)
        if: contains(inputs.platforms, 'arm64') || contains(inputs.platforms, 'riscv64') || contains(inputs.platforms, 'loongarch64')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        if: contains(inputs.platforms, ',') || inputs.platforms != 'linux/amd64'
        uses: docker/setup-buildx-action@v3

      - name: Set tag
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
        shell: bash

      - name: Build
        run: |
          cd "${IMAGE_NAME}"
          for sub in $SUB_IMAGES; do
            IMG=$(tr '[:upper:]' '[:lower:]' <<< "${REGISTRY}/${REPOSITORY}/${IMAGE_NAME}-${sub}")
            echo "Building Image: ${IMG}:${short_sha} for platforms=${{ inputs.platforms }}..."
            if [ "${{ inputs.platforms }}" = "linux/amd64" ]; then
              # legacy single‑arch build
              docker build \
                --target "${sub}" \
                --tag "${IMG}:${short_sha}" \
                -f Dockerfile \
                .
            else
              # multi‑arch via buildx
              docker buildx build \
                --platform "${{ inputs.platforms }}" \
                --load \
                --target "${sub}" \
                --tag "${IMG}:${short_sha}" \
                -f Dockerfile \
                .
            fi
          done
          docker images
        shell: bash

      - name: Check (Linux)
        if: runner.os == 'Linux'
        run: |
          sub=${SUB_IMAGES##* }
          IMG=$(tr '[:upper:]' '[:lower:]' <<< "${REGISTRY}/${REPOSITORY}/${IMAGE_NAME}-${sub}:${short_sha}")
          echo "Launching ${IMG}..."
          docker run \
            --rm \
            --volume "${PWD}":/work \
            --workdir /work \
            "${IMG}" \
            "./.github/workflows/test_build_edk2.sh"
        shell: bash

      - name: Push
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          for sub in $SUB_IMAGES; do
            IMG=$(tr '[:upper:]' '[:lower:]' <<< "${REGISTRY}/${REPOSITORY}/${IMAGE_NAME}-${sub}")
            echo "Pushing Image: ${IMG}:${short_sha}..."
            docker tag "${IMG}:${short_sha}" "${IMG}:latest"
            docker push "${IMG}:${short_sha}"
            docker push "${IMG}:latest"
          done
        shell: bash
